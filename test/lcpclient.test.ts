import { expect } from "chai";
import { ethers, upgrades } from "hardhat";
import fs from "fs/promises";

const X509_CERTIFICATE_PATH = "test/testdata/simulation_rootca.der"

before(async function () {
    await ethers.provider.send("evm_setNextBlockTimestamp", [1718461269]);
    await ethers.provider.send("evm_mine");
});

describe("LCPClientUpgradeable", function () {
    it("Should be upgraded", async function () {
        const avrValidator = await ethers.deployContract("AVRValidator");
        const lcpProtoMarshaler = await ethers.deployContract("LCPProtoMarshaler");
        const LCPClientUpgradeable = await ethers.getContractFactory("LCPClientUpgradeable", {
            libraries: {
                AVRValidator: await avrValidator.getAddress(),
                LCPProtoMarshaler: await lcpProtoMarshaler.getAddress()
            }
        });

        const file = await readFile(X509_CERTIFICATE_PATH)
        const lcpClientUpgradeable = await upgrades.deployProxy(
            LCPClientUpgradeable,
            [file],
            {
                kind: "uups",
                redeployImplementation: "always",
                unsafeAllow: ["constructor", "external-library-linking", "state-variable-immutable"],
                constructorArgs: [ethers.ZeroAddress, true]
            });
        await lcpClientUpgradeable.waitForDeployment();

        expect(await lcpClientUpgradeable.getAddress()).to.not.empty;
        expect(await lcpClientUpgradeable.isDevelopmentMode()).to.eq(true)

        const upgradedLCPClient = await upgrades.upgradeProxy(
            await lcpClientUpgradeable.getAddress(),
            LCPClientUpgradeable,
            {
                kind: "uups",
                redeployImplementation: "always",
                unsafeAllow: ["constructor", "external-library-linking", "state-variable-immutable"],
                constructorArgs: [ethers.ZeroAddress, false]
            }
        );

        expect(await upgradedLCPClient.isDevelopmentMode()).to.eq(false)
    });
});

describe("RecoveredLCPClientUpgradeable", function () {
    it("Should be upgraded", async function () {
        const [owner] = await ethers.getSigners();

        const avrValidator = await ethers.deployContract("AVRValidator");
        const lcpProtoMarshaler = await ethers.deployContract("LCPProtoMarshaler");
        const LCPClientUpgradeable = await ethers.getContractFactory("LCPClientUpgradeable", {
            libraries: {
                AVRValidator: await avrValidator.getAddress(),
                LCPProtoMarshaler: await lcpProtoMarshaler.getAddress()
            }
        });

        const file = await readFile(X509_CERTIFICATE_PATH)
        const lcpClientUpgradeable = await upgrades.deployProxy(
            LCPClientUpgradeable,
            [file],
            {
                kind: "uups",
                redeployImplementation: "always",
                unsafeAllow: ["constructor", "external-library-linking", "state-variable-immutable"],
                constructorArgs: [await owner.getAddress(), true]
            });
        await lcpClientUpgradeable.waitForDeployment();

        expect(await lcpClientUpgradeable.getAddress()).to.not.empty;
        expect(await lcpClientUpgradeable.isDevelopmentMode()).to.eq(true)

        // Test data is referenced from the following test code:
        // https://github.com/datachainlab/lcp-solidity/blob/v0.1.14/test/LCPClientBenchmark.t.sol#L152-L163
        await lcpClientUpgradeable.initializeClient(
            "client-0",
            "0x0a242f6962632e6c69676874636c69656e74732e6c63702e76312e436c69656e74537461746512460a203280c08e19b54d15ca925e0a6c13fedaff2aff6c097f93841abd8d9e1a3072b81080f52422002a024f4b3a14328809bc894f92807417d2dad6b7c998c1afdac648015001",
            "0x0a272f6962632e6c69676874636c69656e74732e6c63702e76312e436f6e73656e73757353746174651200",
        );

        await lcpClientUpgradeable.registerEnclaveKey(
            "client-0",
            [
                "0x7b226964223a223233383536373931313831303330323032363735343834373831373430333133363933343633222c2274696d657374616d70223a22323032342d30362d31355431343a31383a31302e393931303030222c2276657273696f6e223a342c2261647669736f727955524c223a2268747470733a2f2f73656375726974792d63656e7465722e696e74656c2e636f6d222c2261647669736f7279494473223a5b5d2c22697376456e636c61766551756f7465537461747573223a224f4b222c22706c6174666f726d496e666f426c6f62223a6e756c6c2c22697376456e636c61766551756f7465426f6479223a22416741414141734141414476414f3841372b2f763777414141414141414141414141414141414141414144383847474f57566d39744a654b6c614731765539695343447a4e32726d73764944545474365330696e6541414141414141414141414141414141414141414141414141414141414141414141414141414141414141427741414141414141414148414141414141414141444b417749345a7455305679704a65436d77542f74722f4b76397343582b54684271396a5a34614d484b34414141414141414141414141414141414141414141414141414141414141414141414141414141414141434431786e6e6665724b4648443275765971545864444138695a32326b434435787737683338434d664f6e67414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141422f386d393843587359775a56637668746a7a376b6e37774e2b3259414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141227d",
                "0x28ad2eb68dba1f4ae65131478f913e4683f33b491095a396204feeaef351bb3a7affe9a023093d5b3cfc4a7ea72f2f6bcb9c0db331204c2846df1c7098f777c540abd9c71ad355de7134557563863ccd6d39ff5d573ba26fbaace2c2cad06f546ea74532d2ca1e8d256bf2f9e05ecf2e7dd8cbacd149a342986edada6c3d842fdd5e3ae30e95ed119413206fefd59e737866a6df6ba77e45246da332659574bc8044d9fbae08fe8bda245eb56938b14151b23776bd15daa77cd15ce6a3d7aca3917fa4c16464616778f4ecb8026daac9d536e13c0e7c9cbce0f146a2ce0ca81c8450f901f526f4c7a641c3f39ec9e336e373db8be6a4793d272e7a0ec3026a2c",
                "0x308204003082026802141b9b18f6fe11f0b4e7f4bfe80c38757d3d6b59c4300d06092a864886f70d01010b0500307d310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c6172613110300e060355040a0c074578616d706c653139303706035504030c305465737420666f7220496e74656c20534758204174746573746174696f6e205265706f7274205369676e696e672043413020170d3233303630373039343232375a180f32303530313032333039343232375a307a310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c6172613110300e060355040a0c074578616d706c653136303406035504030c2d5465737420666f7220496e74656c20534758204174746573746174696f6e205265706f7274205369676e696e6730820122300d06092a864886f70d01010105000382010f003082010a028201010090d30a012cc4a8f9a1fff7f3d103d9733f3cd390e9481a99e995b47428814c5ce9dcd814d37c2c0b6df082a551f4b0167c355b68f88e38b870f7d341422cc7717c2e2a0034d884a9532bbb6d0c0584729633b611bf5e2e29c5ed76b6a564e2fab8fa3944765709392c9714b2dbdaff0b283adf3c6abd3663b8fa5de345b54addbfc07f02d7f3975bfba01b7cb86d9304d35aa41e3d672502e361abfca07847f770aee2f9e24b464089f55afa5f411d18fe8f2ed7f2539315b5144a35e02faacdd86403e43b6ca397d3c23dae91599862e99f8dcb6f163d4a27573fdd5c7ddbdd5df1d98140dc4567e7a579e18e3d92a982b2848fbf56193135a07a80a7104f6f0203010001300d06092a864886f70d01010b05000382018100b7f58bcfd9854a05b383c6474c1b815045201ccb0766976198f9a87aeec6cb17fdf88bae09cef6a12da5a8fa0974f758af92451afff7e0bc68ff04142aee82e6109d4af23b07591f05dcd6101c748821ff3ebe0a6a1b2a31f268b064cadb56432a225c62a8f9c370b5a18917de5dcc2a737aa57cf82d1df18fc776079545d94d02d635f7c15d7598c4fcf90d7e4e78c263955d55c4577edf1acd96d4789254ab1ab40b46ac997bbaf9027759ddbf60f3ac4dedea2ca72868006b5238bc34325ee3dc5e33557921a0f61355aca18b7abbd6be00a9f68b2dd6d819a5cc85eceaa39d65d3a89168c9052f8f5e9e90d79c245b775c89b59657c1ed7b708b4344d07b93a1aba626ee2c57db776828611fd1bfe94263fb11e48170acab96a31c13bddee923361b97da11bab6efa54decac2bcd3a440ed683f13fa3e9c2e49ca71eca0a16b742d2ab25f306390fec886517322b1e4fc850023e4fe0368f57ac454db62a1c4531eae5b9bc5cefe503e109de9787731e533e97c3650c6e947625a864ad23",
                "0xd48e46969a85889c81848c34d5d425bcbe20e60351e7a496604cd31059bd00ac7a7d4c29ed46ee1a53627563db702da19ed3a915de10eb32c2d238f4980810881c",
            ],
        )
        await lcpClientUpgradeable.updateClient(
            "client-0",
            [
                "0x00000000000000000000000000000000000000000000000000000000000000200001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000333462771e340f9c28fd31b8650ab11139a6a13e73705a6f4c51815134b689b888000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000342593196c95cc2cfd1ce7c1fb7ebde86b3c0fcc8703dc883beba1ead965f2ca4c00000000000000000000000000000000000000000000000017d93341e81dc28d0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000017d93341e81dc28d000000000000000017d93341ab437eeb000000000000000000044c1ff25200000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a90a2b2f6962632e6c69676874636c69656e74732e74656e6465726d696e742e76312e436c69656e745374617465127a0a056962632d311204080110031a040880ea4922040880df6e2a02080532003a040801103442190a090801180120012a0100120c0a02000110211804200c300142190a090801180120012a0100120c0a02000110201801200130014a07757067726164654a1075706772616465644942435374617465500158010000000000000000000000000000000000000000000000",
                ["0x87d23e63535dbbb80e996a316d0b3a1d0d5037a2caff9fea5eb456fbfa94e30c1d9763f2445c0b20aafa1b791b87ddee21eface5add5af81bfb8d202cc7d044d00"],
            ],
        )

        const RecoveredLCPClientUpgradeable = await ethers.getContractFactory("RecoveredLCPClientUpgradeable", {
            libraries: {
                AVRValidator: await avrValidator.getAddress(),
                LCPProtoMarshaler: await lcpProtoMarshaler.getAddress()
            }
        });

        const ibcClient = await ethers.deployContract("MockIBCClient");

        const recoveredLCPClient = await upgrades.upgradeProxy(
            await lcpClientUpgradeable.getAddress(),
            RecoveredLCPClientUpgradeable,
            {
                call: {
                    fn: "upgrade",
                    args: [
                        {
                            clientId: "client-0",
                            mrenclave: "0xd5097b7629c003c1ff46581a46401d43f441dab919340172896ce9d50a35f0ad",
                            keyExpiration: 1700000000,
                            allowedQuoteStatuses: ["GROUP_OUT_OF_DATE"],
                            allowedAdvisoryIds: ["INTEL-SA-00219"],
                        },
                        {
                            height: {
                                revision_number: 1,
                                revision_height: 1000,
                            },
                            consensusState: {
                                stateId: "0xd0a10c3f3049a8e0e07a7b807c752caadcb305e9c9a7862257123241fdd0c19e",
                                timestamp: 1750000000,
                            },
                        },
                    ],
                },
                kind: "uups",
                redeployImplementation: "always",
                unsafeAllow: ["constructor", "external-library-linking", "state-variable-immutable"],
                constructorArgs: [await ibcClient.getAddress(), true, 2]
            }
        );

        const clientStateBytes = await recoveredLCPClient.getClientState("client-0");
        const clientState = await lcpProtoMarshaler.unmarshalClientState(clientStateBytes[0]);
        // mrenclave
        expect(clientState[0]).to.eq("0xd5097b7629c003c1ff46581a46401d43f441dab919340172896ce9d50a35f0ad");
        // key_expiration
        expect(clientState[1]).to.eq(1700000000);
        // allowed_quote_statuses
        expect(clientState[4]).to.eql(["GROUP_OUT_OF_DATE"]);
        // allowed_advisory_ids
        expect(clientState[5]).to.eql(["INTEL-SA-00219"]);

        const latestHeight = await recoveredLCPClient.getLatestHeight("client-0");
        // revision_number
        expect(latestHeight[0]).to.eq(1);
        // revision_height
        expect(latestHeight[1]).to.eq(1000);

        const consensusStateBytes = await recoveredLCPClient.getConsensusState("client-0", { revision_number: 1, revision_height: 1000 });
        const consensusState = await lcpProtoMarshaler.unmarshalConsensusState(consensusStateBytes[0]);
        // state_id
        expect(consensusState[0]).to.eq("0xd0a10c3f3049a8e0e07a7b807c752caadcb305e9c9a7862257123241fdd0c19e");
        // timestamp
        expect(consensusState[1]).to.eq(1750000000);
    });
    it("Should not be upgraded twice", async function () {
        const [owner] = await ethers.getSigners();

        const ibcClient = await ethers.deployContract("MockIBCClient");
        const avrValidator = await ethers.deployContract("AVRValidator");
        const lcpProtoMarshaler = await ethers.deployContract("LCPProtoMarshaler");
        const LCPClientUpgradeable = await ethers.getContractFactory("LCPClientUpgradeable", {
            libraries: {
                AVRValidator: await avrValidator.getAddress(),
                LCPProtoMarshaler: await lcpProtoMarshaler.getAddress()
            }
        });

        const file = await readFile(X509_CERTIFICATE_PATH)
        const lcpClientUpgradeable = await upgrades.deployProxy(
            LCPClientUpgradeable,
            [file],
            {
                kind: "uups",
                redeployImplementation: "always",
                unsafeAllow: ["constructor", "external-library-linking", "state-variable-immutable"],
                constructorArgs: [await owner.getAddress(), true]
            });
        await lcpClientUpgradeable.waitForDeployment();

        expect(await lcpClientUpgradeable.getAddress()).to.not.empty;
        expect(await lcpClientUpgradeable.isDevelopmentMode()).to.eq(true)


        // Test data is referenced from the following test code:
        // https://github.com/datachainlab/lcp-solidity/blob/v0.1.14/test/LCPClientBenchmark.t.sol#L152-L163
        await lcpClientUpgradeable.initializeClient(
            "client-0",
            "0x0a242f6962632e6c69676874636c69656e74732e6c63702e76312e436c69656e74537461746512460a203280c08e19b54d15ca925e0a6c13fedaff2aff6c097f93841abd8d9e1a3072b81080f52422002a024f4b3a14328809bc894f92807417d2dad6b7c998c1afdac648015001",
            "0x0a272f6962632e6c69676874636c69656e74732e6c63702e76312e436f6e73656e73757353746174651200",
        );

        await lcpClientUpgradeable.registerEnclaveKey(
            "client-0",
            [
                "0x7b226964223a223233383536373931313831303330323032363735343834373831373430333133363933343633222c2274696d657374616d70223a22323032342d30362d31355431343a31383a31302e393931303030222c2276657273696f6e223a342c2261647669736f727955524c223a2268747470733a2f2f73656375726974792d63656e7465722e696e74656c2e636f6d222c2261647669736f7279494473223a5b5d2c22697376456e636c61766551756f7465537461747573223a224f4b222c22706c6174666f726d496e666f426c6f62223a6e756c6c2c22697376456e636c61766551756f7465426f6479223a22416741414141734141414476414f3841372b2f763777414141414141414141414141414141414141414144383847474f57566d39744a654b6c614731765539695343447a4e32726d73764944545474365330696e6541414141414141414141414141414141414141414141414141414141414141414141414141414141414141427741414141414141414148414141414141414141444b417749345a7455305679704a65436d77542f74722f4b76397343582b54684271396a5a34614d484b34414141414141414141414141414141414141414141414141414141414141414141414141414141414141434431786e6e6665724b4648443275765971545864444138695a32326b434435787737683338434d664f6e67414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141422f386d393843587359775a56637668746a7a376b6e37774e2b3259414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141227d",
                "0x28ad2eb68dba1f4ae65131478f913e4683f33b491095a396204feeaef351bb3a7affe9a023093d5b3cfc4a7ea72f2f6bcb9c0db331204c2846df1c7098f777c540abd9c71ad355de7134557563863ccd6d39ff5d573ba26fbaace2c2cad06f546ea74532d2ca1e8d256bf2f9e05ecf2e7dd8cbacd149a342986edada6c3d842fdd5e3ae30e95ed119413206fefd59e737866a6df6ba77e45246da332659574bc8044d9fbae08fe8bda245eb56938b14151b23776bd15daa77cd15ce6a3d7aca3917fa4c16464616778f4ecb8026daac9d536e13c0e7c9cbce0f146a2ce0ca81c8450f901f526f4c7a641c3f39ec9e336e373db8be6a4793d272e7a0ec3026a2c",
                "0x308204003082026802141b9b18f6fe11f0b4e7f4bfe80c38757d3d6b59c4300d06092a864886f70d01010b0500307d310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c6172613110300e060355040a0c074578616d706c653139303706035504030c305465737420666f7220496e74656c20534758204174746573746174696f6e205265706f7274205369676e696e672043413020170d3233303630373039343232375a180f32303530313032333039343232375a307a310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c6172613110300e060355040a0c074578616d706c653136303406035504030c2d5465737420666f7220496e74656c20534758204174746573746174696f6e205265706f7274205369676e696e6730820122300d06092a864886f70d01010105000382010f003082010a028201010090d30a012cc4a8f9a1fff7f3d103d9733f3cd390e9481a99e995b47428814c5ce9dcd814d37c2c0b6df082a551f4b0167c355b68f88e38b870f7d341422cc7717c2e2a0034d884a9532bbb6d0c0584729633b611bf5e2e29c5ed76b6a564e2fab8fa3944765709392c9714b2dbdaff0b283adf3c6abd3663b8fa5de345b54addbfc07f02d7f3975bfba01b7cb86d9304d35aa41e3d672502e361abfca07847f770aee2f9e24b464089f55afa5f411d18fe8f2ed7f2539315b5144a35e02faacdd86403e43b6ca397d3c23dae91599862e99f8dcb6f163d4a27573fdd5c7ddbdd5df1d98140dc4567e7a579e18e3d92a982b2848fbf56193135a07a80a7104f6f0203010001300d06092a864886f70d01010b05000382018100b7f58bcfd9854a05b383c6474c1b815045201ccb0766976198f9a87aeec6cb17fdf88bae09cef6a12da5a8fa0974f758af92451afff7e0bc68ff04142aee82e6109d4af23b07591f05dcd6101c748821ff3ebe0a6a1b2a31f268b064cadb56432a225c62a8f9c370b5a18917de5dcc2a737aa57cf82d1df18fc776079545d94d02d635f7c15d7598c4fcf90d7e4e78c263955d55c4577edf1acd96d4789254ab1ab40b46ac997bbaf9027759ddbf60f3ac4dedea2ca72868006b5238bc34325ee3dc5e33557921a0f61355aca18b7abbd6be00a9f68b2dd6d819a5cc85eceaa39d65d3a89168c9052f8f5e9e90d79c245b775c89b59657c1ed7b708b4344d07b93a1aba626ee2c57db776828611fd1bfe94263fb11e48170acab96a31c13bddee923361b97da11bab6efa54decac2bcd3a440ed683f13fa3e9c2e49ca71eca0a16b742d2ab25f306390fec886517322b1e4fc850023e4fe0368f57ac454db62a1c4531eae5b9bc5cefe503e109de9787731e533e97c3650c6e947625a864ad23",
                "0xd48e46969a85889c81848c34d5d425bcbe20e60351e7a496604cd31059bd00ac7a7d4c29ed46ee1a53627563db702da19ed3a915de10eb32c2d238f4980810881c",
            ],
        )
        await lcpClientUpgradeable.updateClient(
            "client-0",
            [
                "0x00000000000000000000000000000000000000000000000000000000000000200001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000333462771e340f9c28fd31b8650ab11139a6a13e73705a6f4c51815134b689b888000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000342593196c95cc2cfd1ce7c1fb7ebde86b3c0fcc8703dc883beba1ead965f2ca4c00000000000000000000000000000000000000000000000017d93341e81dc28d0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000017d93341e81dc28d000000000000000017d93341ab437eeb000000000000000000044c1ff25200000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a90a2b2f6962632e6c69676874636c69656e74732e74656e6465726d696e742e76312e436c69656e745374617465127a0a056962632d311204080110031a040880ea4922040880df6e2a02080532003a040801103442190a090801180120012a0100120c0a02000110211804200c300142190a090801180120012a0100120c0a02000110201801200130014a07757067726164654a1075706772616465644942435374617465500158010000000000000000000000000000000000000000000000",
                ["0x87d23e63535dbbb80e996a316d0b3a1d0d5037a2caff9fea5eb456fbfa94e30c1d9763f2445c0b20aafa1b791b87ddee21eface5add5af81bfb8d202cc7d044d00"],
            ],
        )

        const RecoveredLCPClientUpgradeable = await ethers.getContractFactory("RecoveredLCPClientUpgradeable", {
            libraries: {
                AVRValidator: await avrValidator.getAddress(),
                LCPProtoMarshaler: await lcpProtoMarshaler.getAddress()
            }
        });

        await upgrades.upgradeProxy(
            await lcpClientUpgradeable.getAddress(),
            RecoveredLCPClientUpgradeable,
            {
                call: {
                    fn: "upgrade",
                    args: [
                        {
                            clientId: "client-0",
                            mrenclave: "0xd5097b7629c003c1ff46581a46401d43f441dab919340172896ce9d50a35f0ad",
                            keyExpiration: 1700000000,
                            allowedQuoteStatuses: ["GROUP_OUT_OF_DATE"],
                            allowedAdvisoryIds: ["INTEL-SA-00219"],
                        },
                        {
                            height: {
                                revision_number: 1,
                                revision_height: 1000,
                            },
                            consensusState: {
                                stateId: "0xd0a10c3f3049a8e0e07a7b807c752caadcb305e9c9a7862257123241fdd0c19e",
                                timestamp: 1750000000,
                            },
                        },
                    ],
                },
                kind: "uups",
                redeployImplementation: "always",
                unsafeAllow: ["constructor", "external-library-linking", "state-variable-immutable"],
                constructorArgs: [await ibcClient.getAddress(), true, 2]
            }
        );

        await expect(upgrades.upgradeProxy(
            await lcpClientUpgradeable.getAddress(),
            RecoveredLCPClientUpgradeable,
            {
                call: {
                    fn: "upgrade",
                    args: [
                        {
                            clientId: "client-0",
                            mrenclave: "0xd5097b7629c003c1ff46581a46401d43f441dab919340172896ce9d50a35f0ad",
                            keyExpiration: 1700000000,
                            allowedQuoteStatuses: ["GROUP_OUT_OF_DATE"],
                            allowedAdvisoryIds: ["INTEL-SA-00219"],
                        },
                        {
                            height: {
                                revision_number: 1,
                                revision_height: 1000,
                            },
                            consensusState: {
                                stateId: "0xd0a10c3f3049a8e0e07a7b807c752caadcb305e9c9a7862257123241fdd0c19e",
                                timestamp: 1750000000,
                            },
                        },
                    ],
                },
                kind: "uups",
                redeployImplementation: "never",
                unsafeAllow: ["constructor", "external-library-linking", "state-variable-immutable"],
                constructorArgs: [await ibcClient.getAddress(), true, 2]
            }
        )).to.be.revertedWithCustomError(RecoveredLCPClientUpgradeable, "InvalidInitialization");
    });
});

async function readFile(filePath: string): Promise<Uint8Array> {
    try {
        const data = await fs.readFile(filePath);
        return new Uint8Array(data.buffer);
    } catch (error) {
        throw error;
    }
}
